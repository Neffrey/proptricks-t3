// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// User & Account models
model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.VarChar(500)
  access_token             String?  @db.VarChar(500)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// USER MODEL
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?   @default("user") // user, admin, banned
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
}

// DATA MODELS
model Prop {
  id        String     @id @default(cuid())
  propNames PropName[]
  Trick     Trick[]
}

model PropName {
  id     String @id @default(cuid())
  name   String @default("")
  prop   Prop   @relation(fields: [propId], references: [id], onDelete: Cascade)
  propId String
  votes  Vote[]

  @@index([propId])
}

model Trick {
  id         String      @id @default(cuid())
  status     String? // published or deleted
  prop       Prop        @relation(fields: [propId], references: [id], onDelete: Cascade)
  propId     String
  trickNames TrickName[]
  trickTags  TrickTag[]
  comments   Comment[]

  @@index([propId])
}

model TrickName {
  id      String @id @default(cuid())
  name    String @default("")
  trick   Trick  @relation(fields: [trickId], references: [id], onDelete: Cascade)
  trickId String
  votes   Vote[]

  @@index([trickId])
}

model TrickTag {
  id      String @id @default(cuid())
  name    String @default("")
  trick   Trick  @relation(fields: [trickId], references: [id], onDelete: Cascade)
  trickId String
  votes   Vote[]

  @@index([trickId])
}

model Comment {
  id      String @id @default(cuid())
  text    String @default("")
  trick   Trick  @relation(fields: [trickId], references: [id], onDelete: Cascade)
  trickId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  votes   Vote[]

  @@index([trickId])
  @@index([userId])
}

model Vote {
  id             String     @id @default(cuid())
  downVote       Boolean    @default(false)
  commentVote    Comment?   @relation(fields: [commentVoteId], references: [id], onDelete: Cascade)
  commentVoteId  String
  nameVote       TrickName? @relation(fields: [nameVoteId], references: [id], onDelete: Cascade)
  nameVoteId     String
  tagVote        TrickTag?  @relation(fields: [tagVoteId], references: [id], onDelete: Cascade)
  tagVoteId      String
  propNameVote   PropName?  @relation(fields: [propNameVoteId], references: [id])
  propNameVoteId String?

  @@index([commentVoteId])
  @@index([nameVoteId])
  @@index([tagVoteId])
  @@index([propNameVoteId])
}


// OLD SCHEMA
// // Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
